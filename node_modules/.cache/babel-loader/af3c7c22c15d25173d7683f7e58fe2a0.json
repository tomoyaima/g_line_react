{"ast":null,"code":"import _objectSpread from \"/Users/imatomo/Desktop/gline-react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/imatomo/Desktop/gline-react/src/components/Detail.js\";\nimport React from \"react\";\nimport \"../bower_components/materialize/dist/css/materialize.css\";\nimport \"./style.css\";\nimport Post from \"./Post\";\nimport { db } from '../firebase';\nimport firebase from '../firebase';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport { storage } from '../firebase';\nimport Posts from \"./Posts\";\n\nclass Detail extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFileSelect = e => {\n      const files = e.target.files;\n      Array.prototype.forEach.call(files, file => {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n          this.setState(state => {\n            state.postimageurls.push(reader.result);\n            state.files.push(file);\n            return state;\n          });\n        });\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      });\n    };\n\n    this.state = {\n      post: [],\n      text: \"\",\n      postimageurls: [],\n      responses: []\n    };\n    this.handleInputText = this.handleInputText.bind(this);\n    this.handleFileSelect = this.handleFileSelect.bind(this);\n  }\n\n  handleInputText(event) {\n    this.setState({\n      text: event.target.value\n    });\n  }\n\n  componentWillMount() {\n    const postsref = db.collection(\"posts\").orderBy('timestamp', 'desc');\n    postsref.limit(20).onSnapshot(snapshot => {\n      const posts = snapshot.docs.map(postdoc => {\n        const post = postdoc.data(); //  console.log(post);\n\n        if (post.postimageurl != []) {\n          const pathref = storage.ref().child(\"images/\".concat(post.postimageurl));\n          pathref.getDownloadURL().then(url => {\n            this.setState(state => {\n              const index = state.posts.findIndex(post => {\n                return post.id === postdoc.id;\n              });\n              state.posts[index].postimageurl.push(url);\n              return state;\n            });\n          });\n        }\n\n        return _objectSpread({}, post, {\n          id: postdoc.id\n        });\n      });\n      console.log(posts);\n      const uid = this.props.match.params.id;\n      const post = posts.find(posts => {\n        return posts.id === uid;\n      });\n      this.setState({\n        post: post\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.props.user && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.post.title, this.state.post.body, this.state.post.name, this.state.post.pictureurl, this.state.post.course, this.state.post.nickname, this.state.post.favcount, this.state.post.librarycount), React.createElement(Response, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Detail;","map":{"version":3,"sources":["/Users/imatomo/Desktop/gline-react/src/components/Detail.js"],"names":["React","Post","db","firebase","BrowserRouter","Route","Link","storage","Posts","Detail","Component","constructor","props","handleFileSelect","e","files","target","Array","prototype","forEach","call","file","reader","FileReader","addEventListener","setState","state","postimageurls","push","result","readAsDataURL","post","text","responses","handleInputText","bind","event","value","componentWillMount","postsref","collection","orderBy","limit","onSnapshot","snapshot","posts","docs","map","postdoc","data","postimageurl","pathref","ref","child","getDownloadURL","then","url","index","findIndex","id","console","log","uid","match","params","find","render","user","title","body","name","pictureurl","course","nickname","favcount","librarycount"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0DAAP;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,IAA/B,QAA2C,kBAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,MAAN,SAAqBT,KAAK,CAACU,SAA3B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAsBlBC,gBAtBkB,GAsBEC,CAAD,IAAO;AACtB,YAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACAE,MAAAA,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BL,KAA7B,EAAoCM,IAAD,IAAU;AACzC,cAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,QAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAA+B,MAAI;AAC/B,eAAKC,QAAL,CAAeC,KAAD,IAAS;AACnBA,YAAAA,KAAK,CAACC,aAAN,CAAoBC,IAApB,CAAyBN,MAAM,CAACO,MAAhC;AACAH,YAAAA,KAAK,CAACX,KAAN,CAAYa,IAAZ,CAAiBP,IAAjB;AACA,mBAAOK,KAAP;AACH,WAJD;AAMF,SAPF;;AAQA,YAAGL,IAAH,EAAQ;AACJC,UAAAA,MAAM,CAACQ,aAAP,CAAqBT,IAArB;AACH;AACJ,OAbD;AAeH,KAvCiB;;AAEd,SAAKK,KAAL,GAAW;AACRK,MAAAA,IAAI,EAAC,EADG;AAERC,MAAAA,IAAI,EAAG,EAFC;AAGRL,MAAAA,aAAa,EAAC,EAHN;AAIRM,MAAAA,SAAS,EAAC;AAJF,KAAX;AAOA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AAEA,SAAKtB,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBsB,IAAtB,CAA2B,IAA3B,CAAxB;AACH;;AAEDD,EAAAA,eAAe,CAACE,KAAD,EAAQ;AACnB,SAAKX,QAAL,CAAc;AAEVO,MAAAA,IAAI,EAAEI,KAAK,CAACpB,MAAN,CAAaqB;AAFT,KAAd;AAIH;;AAsBDC,EAAAA,kBAAkB,GAAE;AAIhB,UAAMC,QAAQ,GAAGrC,EAAE,CAACsC,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B,WAA/B,EAA4C,MAA5C,CAAjB;AACAF,IAAAA,QAAQ,CAACG,KAAT,CAAe,EAAf,EAAmBC,UAAnB,CAA+BC,QAAD,IAAc;AACxC,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAoBC,OAAD,IAAY;AAEzC,cAAMjB,IAAI,GAAGiB,OAAO,CAACC,IAAR,EAAb,CAFyC,CAGrC;;AACJ,YAAGlB,IAAI,CAACmB,YAAL,IAAmB,EAAtB,EAAyB;AACrB,gBAAMC,OAAO,GAAG5C,OAAO,CAAC6C,GAAR,GAAcC,KAAd,kBAA8BtB,IAAI,CAACmB,YAAnC,EAAhB;AACAC,UAAAA,OAAO,CAACG,cAAR,GAAyBC,IAAzB,CAA+BC,GAAD,IAAO;AAEjC,iBAAK/B,QAAL,CAAeC,KAAD,IAAS;AACnB,oBAAM+B,KAAK,GAAI/B,KAAK,CAACmB,KAAN,CAAYa,SAAZ,CAAuB3B,IAAD,IAAQ;AACzC,uBAAOA,IAAI,CAAC4B,EAAL,KAAYX,OAAO,CAACW,EAA3B;AACH,eAFc,CAAf;AAGAjC,cAAAA,KAAK,CAACmB,KAAN,CAAYY,KAAZ,EAAmBP,YAAnB,CAAgCtB,IAAhC,CAAqC4B,GAArC;AAIA,qBAAO9B,KAAP;AACH,aATD;AAUH,WAZD;AAeH;;AACD,iCAAWK,IAAX;AAAgB4B,UAAAA,EAAE,EAACX,OAAO,CAACW;AAA3B;AAGH,OAzBa,CAAd;AA0BAC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACA,YAAMiB,GAAG,GAAE,KAAKlD,KAAL,CAAWmD,KAAX,CAAiBC,MAAjB,CAAwBL,EAAnC;AACA,YAAM5B,IAAI,GAAEc,KAAK,CAACoB,IAAN,CAAYpB,KAAD,IAAW;AAAC,eAAQA,KAAK,CAACc,EAAN,KAAaG,GAArB;AAA2B,OAAlD,CAAZ;AACA,WAAKrC,QAAL,CAAc;AACVM,QAAAA,IAAI,EAACA;AADK,OAAd;AAIH,KAlCD;AAqCH;;AAGDmC,EAAAA,MAAM,GAAE;AAEJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKtD,KAAL,CAAWuD,IAAX,IAGU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKzC,KAAL,CAAWK,IAAX,CAAgBqC,KADtB,EAEM,KAAK1C,KAAL,CAAWK,IAAX,CAAgBsC,IAFtB,EAGM,KAAK3C,KAAL,CAAWK,IAAX,CAAgBuC,IAHtB,EAIM,KAAK5C,KAAL,CAAWK,IAAX,CAAgBwC,UAJtB,EAMM,KAAK7C,KAAL,CAAWK,IAAX,CAAgByC,MANtB,EAOM,KAAK9C,KAAL,CAAWK,IAAX,CAAgB0C,QAPtB,EAQM,KAAK/C,KAAL,CAAWK,IAAX,CAAgB2C,QARtB,EASM,KAAKhD,KAAL,CAAWK,IAAX,CAAgB4C,YATtB,CALf,EAsBA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBA,CADJ;AA0BH;;AAnH+B;;AAuHpC,eAAelE,MAAf","sourcesContent":["import React from \"react\";\nimport \"../bower_components/materialize/dist/css/materialize.css\";\nimport \"./style.css\";\nimport Post from \"./Post\"\nimport { db } from '../firebase'\nimport firebase from '../firebase'\nimport { BrowserRouter, Route, Link } from 'react-router-dom'\nimport { storage } from '../firebase'\nimport Posts from \"./Posts\";\n\nclass Detail extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n           post:[],\n           text : \"\",\n           postimageurls:[],\n           responses:[]\n           \n        }\n        this.handleInputText = this.handleInputText.bind(this);\n        \n        this.handleFileSelect = this.handleFileSelect.bind(this);\n    }\n\n    handleInputText(event) {\n        this.setState({\n\n            text: event.target.value\n        })\n    }\n\n\n    handleFileSelect = (e) => {\n        const files = e.target.files\n        Array.prototype.forEach.call(files,(file) => {\n            const reader = new FileReader()\n            reader.addEventListener(\"load\",()=>{\n                this.setState((state)=>{\n                    state.postimageurls.push(reader.result)\n                    state.files.push(file)\n                    return state\n                })\n\n             })\n            if(file){\n                reader.readAsDataURL(file)\n            }\n        });\n        \n    }\n\n    componentWillMount(){\n\n        \n\n        const postsref = db.collection(\"posts\").orderBy('timestamp', 'desc')\n        postsref.limit(20).onSnapshot((snapshot) => {\n            const posts = snapshot.docs.map( (postdoc) =>{\n                \n                const post = postdoc.data();\n                    //  console.log(post);\n                if(post.postimageurl!=[]){\n                    const pathref = storage.ref().child(`images/${post.postimageurl}`)\n                    pathref.getDownloadURL().then((url)=>{ \n\n                        this.setState((state)=>{\n                            const index =  state.posts.findIndex((post)=>{\n                                return post.id === postdoc.id;\n                            })\n                            state.posts[index].postimageurl.push(url)\n\n\n                            \n                            return state\n                        })\n                    })\n\n                    \n                }\n                return {...post,id:postdoc.id}\n                \n               \n            })\n            console.log(posts)\n            const uid =this.props.match.params.id\n            const post= posts.find((posts) => {return (posts.id === uid);})\n            this.setState({\n                post:post\n            })\n           \n        });\n       \n    \n    }\n   \n\n    render(){\n        \n        return(\n            <div>\n\n                {this.props.user&&\n                     \n                    \n                           <div>\n                                {this.state.post.title}\n                                {this.state.post.body}\n                                {this.state.post.name}\n                                {this.state.post.pictureurl}\n                               \n                                {this.state.post.course}\n                                {this.state.post.nickname}\n                                {this.state.post.favcount}\n                                {this.state.post.librarycount}\n                               \n                            </div> \n                         \n                           \n                   \n                }\n            \n            <Response/>\n            </div>\n        )\n    }\n    \n}\n\nexport default Detail\n"]},"metadata":{},"sourceType":"module"}