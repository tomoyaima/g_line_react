{"ast":null,"code":"import _objectSpread from \"/Users/imatomo/Desktop/gline-react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/imatomo/Desktop/gline-react/src/components/Response.js\";\n//解答の閲覧画面のコンポーネントを編集\nimport React from \"react\";\nimport \"../bower_components/materialize/dist/css/materialize.css\";\nimport \"./style.css\";\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport firebase, { db, storage } from '../firebase';\n\nclass Response extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.save = e => {\n      if (this.state.files != []) {\n        e.preventDefault();\n        this.state.files.forEach(file => {\n          storage.ref().child(\"images/\".concat(file.name)).put(file).then(snap => {\n            console.log('Uploaded a blob or file!');\n          });\n        });\n      }\n\n      let id = 0;\n      let post_id = String(id);\n      const user = firebase.auth().currentUser;\n      const userdb = db.collection(\"users\").doc(user.uid);\n      userdb.get().then(userdb => {\n        if (userdb.exists) {\n          console.log(\"Document data:\", userdb.data());\n\n          if (this.state.files == null) {\n            db.collection(\"Responses\").doc().set({\n              post_id: this.props.match.params.id,\n              name: userdb.data().name,\n              pic: userdb.data().pic,\n              email: userdb.data().email,\n              course: userdb.data().course,\n              nickname: userdb.data().nickname,\n              text: this.state.text,\n              favcount: 0,\n              timestamp: new Date(),\n              responseimageurl: []\n            }).then(() => {\n              console.log(\"\\u8FFD\\u52A0\\u306B\\u6210\\u529F\\u3057\\u307E\\u3057\\u305F \");\n              this.props.changepost();\n            }).catch(error => {\n              console.log(\"\\u8FFD\\u52A0\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F (\".concat(error, \")\"));\n            });\n          } else {\n            db.collection(\"Responses\").doc().set({\n              post_id: this.props.match.params.id,\n              name: userdb.data().name,\n              pic: userdb.data().pic,\n              email: userdb.data().email,\n              course: userdb.data().course,\n              nickname: userdb.data().nickname,\n              text: this.state.text,\n              favcount: 0,\n              timestamp: new Date()\n            }).then(() => {\n              console.log(\"\\u8FFD\\u52A0\\u306B\\u6210\\u529F\\u3057\\u307E\\u3057\\u305F \");\n            }).catch(error => {\n              console.log(\"\\u8FFD\\u52A0\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F (\".concat(error, \")\"));\n            });\n          }\n        } else {\n          // doc.data() will be undefined in this case\n          console.log(\"No such document!\");\n        }\n      }).catch(function (error) {\n        console.log(\"\\u53D6\\u5F97\\u5931\\u6557 (\".concat(error, \")\"));\n      });\n    };\n\n    this.handleFileSelect = e => {\n      const files = e.target.files;\n      Array.prototype.forEach.call(files, file => {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n          this.setState(state => {\n            state.postimageurls.push(reader.result);\n            state.files.push(file);\n            return state;\n          });\n        });\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      });\n    };\n\n    this.state = {\n      text: \"\",\n      responseimageurls: [],\n      files: [],\n      responses: []\n    };\n    this.handleInputText = this.handleInputText.bind(this);\n    this.handleFileSelect = this.handleFileSelect.bind(this);\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({\n        user\n      });\n    });\n    const responsesref = db.collection(\"posts\").orderBy('timestamp', 'desc');\n    responsesref.limit(20).onSnapshot(snapshot => {\n      const responses = snapshot.docs.map(postdoc => {\n        const response = postdoc.data(); //  console.log(post);\n\n        if (post.postimageurl != []) {\n          const pathref = storage.ref().child(\"images/\".concat(post.postimageurl));\n          pathref.getDownloadURL().then(url => {\n            this.setState(state => {\n              const index = state.posts.findIndex(post => {\n                return post.id === postdoc.id;\n              });\n              state.posts[index].postimageurl.push(url);\n              return state;\n            });\n          });\n        }\n\n        return _objectSpread({}, post, {\n          id: postdoc.id\n        });\n      });\n      this.setState({\n        posts: posts\n      });\n    });\n  }\n\n  handleInputText(event) {\n    this.setState({\n      text: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"posttitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"\\u56DE\\u7B54\\u3092\\u5165\\u529B:\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.Text,\n      onChange: this.handleInputText.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"file-field input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"File\"), React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleFileSelect.bind(this),\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"file-path-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"file-path validate\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    })), this.state.responseimageurls.map((imageurl, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: imageurl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }));\n    })), React.createElement(\"button\", {\n      onClick: this.save,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"\\u56DE\\u7B54\\u3092\\u6295\\u7A3F\\u3059\\u308B\"));\n  }\n\n}\n\nexport default Response;","map":{"version":3,"sources":["/Users/imatomo/Desktop/gline-react/src/components/Response.js"],"names":["React","BrowserRouter","Route","Link","firebase","db","storage","Response","Component","constructor","props","save","e","state","files","preventDefault","forEach","file","ref","child","name","put","then","snap","console","log","id","post_id","String","user","auth","currentUser","userdb","collection","doc","uid","get","exists","data","set","match","params","pic","email","course","nickname","text","favcount","timestamp","Date","responseimageurl","changepost","catch","error","handleFileSelect","target","Array","prototype","call","reader","FileReader","addEventListener","setState","postimageurls","push","result","readAsDataURL","responseimageurls","responses","handleInputText","bind","componentDidMount","onAuthStateChanged","responsesref","orderBy","limit","onSnapshot","snapshot","docs","map","postdoc","response","post","postimageurl","pathref","getDownloadURL","url","index","posts","findIndex","event","value","render","Text","imageurl","i"],"mappings":"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","sourcesContent":["//解答の閲覧画面のコンポーネントを編集\nimport React from \"react\";\nimport \"../bower_components/materialize/dist/css/materialize.css\";\nimport \"./style.css\";\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport firebase, { db, storage } from '../firebase';\n\nclass Response extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n\n            text : \"\",\n            responseimageurls:[],\n            files:[],\n            responses:[]\n            \n         }\n         this.handleInputText = this.handleInputText.bind(this);\n         \n         this.handleFileSelect = this.handleFileSelect.bind(this);\n     }\n\n\n     componentDidMount(){\n\n        \n        firebase.auth().onAuthStateChanged(user => {\n            this.setState({ user })\n          })\n\n        const responsesref = db.collection(\"posts\").orderBy('timestamp', 'desc')\n        responsesref.limit(20).onSnapshot((snapshot) => {\n            const responses = snapshot.docs.map( (postdoc) =>{\n                \n                const response = postdoc.data();\n                    //  console.log(post);\n                if(post.postimageurl!=[]){\n                    const pathref = storage.ref().child(`images/${post.postimageurl}`)\n                    pathref.getDownloadURL().then((url)=>{ \n\n                        this.setState((state)=>{\n                            const index =  state.posts.findIndex((post)=>{\n                                return post.id === postdoc.id;\n                            })\n                            state.posts[index].postimageurl.push(url)\n\n\n                            \n                            return state\n                        })\n                    })\n\n                    \n                }\n                return {...post,id:postdoc.id}\n                \n               \n            })\n            this.setState({\n                posts : posts,\n                \n            })\n           \n        });\n        \n    \n    }\n\n     save = (e) => {\n\n        \n\n        if(this.state.files!=[]){\n             e.preventDefault()\n             this.state.files.forEach((file)=>{\n                \n                 storage.ref().child(`images/${file.name}`).put(file).then(snap => {\n                     console.log('Uploaded a blob or file!');\n                 });\n             })\n         }   \n         let id =0;\n         let post_id = String(id)\n         const user = firebase.auth().currentUser\n         const userdb = db.collection(\"users\").doc(user.uid);\n         userdb.get().then((userdb) => {\n             if (userdb.exists) {\n                 console.log(\"Document data:\", userdb.data());\n             \n                     if(this.state.files==null){\n                         db.collection(\"Responses\").doc().set({\n                             post_id : this.props.match.params.id,\n                             name: userdb.data().name,\n                             pic: userdb.data().pic,\n                             email: userdb.data().email,\n                             course: userdb.data().course,\n                             nickname: userdb.data().nickname,\n                             text: this.state.text,\n                             favcount: 0,                           \n                             timestamp: new Date(),                            \n                             responseimageurl:[]\n \n                         })        \n                         .then(() => {\n                             \n                            \n                             console.log(`追加に成功しました `);\n                             this.props.changepost()\n                         })\n                         .catch((error) => {\n                             console.log(`追加に失敗しました (${error})`);\n                         });\n                     }else{\n                         db.collection(\"Responses\").doc().set({\n                            post_id : this.props.match.params.id,\n                             name: userdb.data().name,\n                             pic: userdb.data().pic,\n                             email: userdb.data().email,\n                             course: userdb.data().course,\n                             nickname: userdb.data().nickname,\n                             text: this.state.text,\n                             favcount: 0,                           \n                             timestamp: new Date(),                            \n                           \n \n \n                         })        \n                         .then(() => {\n                            \n                             console.log(`追加に成功しました `);\n                             \n                         })\n                         .catch((error) => {\n                             console.log(`追加に失敗しました (${error})`);\n                         });\n \n \n \n                     }\n             } else {\n                 // doc.data() will be undefined in this case\n                 console.log(\"No such document!\");\n             }\n                     \n         })\n         .catch(function(error){\n         console.log(`取得失敗 (${error})`);\n             });\n     }\n\n\n    handleInputText(event) {\n        this.setState({\n\n            text: event.target.value\n        })\n    }\n\n\n    handleFileSelect = (e) => {\n        const files = e.target.files\n        Array.prototype.forEach.call(files,(file) => {\n            const reader = new FileReader()\n            reader.addEventListener(\"load\",()=>{\n                this.setState((state)=>{\n                    state.postimageurls.push(reader.result)\n                    state.files.push(file)\n                    return state\n                })\n\n             })\n            if(file){\n                reader.readAsDataURL(file)\n            }\n        });\n        \n    }\n\n    render(){\n        \n        return(\n            <div>\n             <div className=\"posttitle\">回答を入力:\n                            <input type='text' value={this.state.Text} onChange={this.handleInputText.bind(this)} />\n                        </div>\n                       \n                        <div className=\"file-field input-field\">\n                            <div className=\"btn\">\n                                <span>File</span>\n                                <input type=\"file\" onChange={this.handleFileSelect.bind(this)} multiple />\n                            </div>\n                            <div className=\"file-path-wrapper\">\n                                <input className=\"file-path validate\" type=\"text\"/>\n                            </div>\n                            {\n                                this.state.responseimageurls.map((imageurl,i)=>{\n                                    return (\n                                    <div key={i}>\n                                        <img src={imageurl}></img>\n                                    </div>\n                                    )\n                                })\n                            }\n                            \n                        </div>\n                        <button onClick={this.save}>回答を投稿する</button>\n                        </div>\n\n                      \n        )\n    }\n}\n\nexport default Response\n"]},"metadata":{},"sourceType":"module"}